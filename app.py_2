from flask import Flask, request, jsonify
import jwt
from jwt.exceptions import InvalidTokenError
import math
from flask_swagger_ui import get_swaggerui_blueprint

app = Flask(__name__)

### Swagger specific ###
SWAGGER_URL = '/swagger'
API_URL = '/static/swagger.yaml'
SWAGGERUI_BLUEPRINT = get_swaggerui_blueprint(SWAGGER_URL, API_URL, config={'app_name': "JWT Verifier API"})
app.register_blueprint(SWAGGERUI_BLUEPRINT, url_prefix=SWAGGER_URL)
### End Swagger specific ###

def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

@app.route('/verify', methods=['POST'])
def verify_jwt():
    token = request.json.get('token')
    if not token:
        return jsonify({'error': 'Token obrigatorio'}), 400

    try:
        payload = jwt.decode(token, options={"verify_signature": False})
    except InvalidTokenError:
        return jsonify({'error': 'JWT invalido'}), 200

    required_claims = ['Name', 'Role', 'Seed']
    if len(payload) != 3 or any(claim not in payload for claim in required_claims):
        return jsonify({'error': 'Foi encontrado mais de 3 claims.'}), 400

    name = payload['Name']
    role = payload['Role']
    seed = payload['Seed']

    if not isinstance(name, str) or any(char.isdigit() for char in name) or len(name) > 256:
        return jsonify({'error': 'Claim Name invalido. Abrindo o JWT, a Claim Name possui caracter de numeros'}), 400

    if role not in ['Admin', 'Member', 'External']:
        return jsonify({'error': 'Role Claim Role Invalido'}), 400

    try:
        seed = int(seed)
    except ValueError:
        return jsonify({'error': 'Seed deve ser um numero'}), 400

    if not is_prime(seed):
        return jsonify({'error': 'A claim Seed deve ser um numero primo'}), 400

    # Se todas as verificações passarem, retornar uma resposta de sucesso com detalhes do payload e justificativa
    return jsonify({
        'message': 'JWT valido',
        'justification': 'Abrindo o JWT, as informações contidas atendem a descricao',
        'payload': payload
    }), 200

if __name__ == '__main__':
    app.run(debug=True)


